#!/usr/bin/python
# Copyright (C) 2019 Red Hat, Inc., Jake Hunsaker <jhunsake@redhat.com>

# This file is part of the rig project: https://github.com/TurboTurtle/rig
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# version 2 of the GNU General Public License.
#
# See the LICENSE file in the source distribution for further information.

import argparse
import os
import sys

from rigging.utilities import load_rig_commands

__version__ = '1.1'

if __name__ == '__main__':

    rig_cmds = load_rig_commands()

    desc = ('Rig is used to monitor a resource for a specific trigger and then'
            ' execute a user-defined action.')
    usage = """
    rig <subcmd> <options>

    <subcmd> may be one of the following:

    """

    for _rig in rig_cmds:
        usage += "\t{name:<15}\t{desc}\n".format(
            name=_rig,
            desc=rig_cmds[_rig].parser_description
        )

    epilog = """
    For more information on the types of rigs and the options available to them
    use rig <subcmd> --help.
    E.G. 'rig info --help'
    """

    parser = argparse.ArgumentParser(description=desc, usage=usage,
                                     epilog=epilog)
    subparsers = parser.add_subparsers(dest='subcmd', metavar='subcmd',
                                       help='rig command to run')
    subparsers.required = True

    for cmd in rig_cmds:
        cmd_subparser = subparsers.add_parser(cmd, prog=f"rig {cmd}")
        cmd_subparser.usage = f"rig {cmd} [options]"
        if rig_cmds[cmd].__doc__:
            cmd_subparser.usage += f"\n{rig_cmds[cmd].__doc__}\n"
        rig_cmds[cmd].add_parser_options(parser=cmd_subparser)
        cmd_subparser.set_defaults(subcmd=cmd)

    args = vars(parser.parse_args(sys.argv[1:]))

    try:
        if args['subcmd'] in rig_cmds:
            if rig_cmds[args['subcmd']].root_required:
                if not os.getuid() == 0:
                    raise PermissionError("Command requires root privileges")
            rig = rig_cmds[args['subcmd']](args)
            rig.execute()
    except Exception as err:
        print(f"{err}")
        sys.exit(1)
